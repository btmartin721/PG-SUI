:orphan:

:py:mod:`PG-SUI.read_input.read_input`
======================================

.. py:module:: PG-SUI.read_input.read_input


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   PG-SUI.read_input.read_input.GenotypeData



Functions
~~~~~~~~~

.. autoapisummary::

   PG-SUI.read_input.read_input.merge_alleles



.. py:class:: GenotypeData(filename: Optional[str] = None, filetype: Optional[str] = None, popmapfile: Optional[str] = None, guidetree: Optional[str] = None, qmatrix_iqtree: Optional[str] = None, qmatrix: Optional[str] = None)

   Read genotype and tree data and encode genotypes.

   Reads in a PHYLIP or STRUCTURE-formatted input file and converts the genotypes to 012 or one-hot encodings.

   Args:
           filename (str or None): Path to input file containing genotypes. Defaults to None.

           filetype (str or None): Type of input genotype file. Possible ``filetype`` values include: "phylip", "structure1row", or "structure2row". VCF compatibility may be added in the future, but is not currently supported. Defaults to None.

           popmapfile (str or None): Path to population map file. If ``popmapfile`` is supplied and ``filetype`` is one of the STRUCTURE formats, then the structure file is assumed to have NO popID column. Defaults to None.

           guidetree (str or None): Path to input treefile. Defaults to None.

           qmatrix_iqtree (str or None): Path to iqtree output file containing Q rate matrix. Defaults to None.

           qmatrix (str or None): Path to file containing only Q rate matrix, and not the full iqtree file. Defaults to None.

   Attributes:
           samples (List[str]): List containing sample IDs of shape (n_samples,).

           snps (List[List[str]]): 2D list of shape (n_samples, n_sites) containing genotypes.

           pops (List[str]): List of population IDs of shape (n_samples,).

           onehot (List[List[List[float]]]): One-hot encoded genotypes as a 3D list of shape (n_samples, n_sites, 4). The inner-most list represents the four nucleotide bases in the order of "A", "T", "G", "C". If position 0 contains a 1.0, then the site is an "A". If position 1 contains a 1.0, then the site is a "T"...etc. Two values of 0.5 indicates a heterozygote. Missing data is encoded as four values of 0.0.

           guidetree (toytree object): Input guide tree as a toytree object.

           num_snps (int): Number of SNPs (features) present in the dataset.

           num_inds: (int): Number of individuals (samples) present in the dataset.

   Properties:
           snpcount (int): Number of SNPs (features) in the dataset.

           indcount (int): Number of individuals (samples) in the dataset.

           populations (List[str]): List of population IDs of shape (n_samples,).

           individuals (List[str]): List of sample IDs of shape (n_samples,).

           genotypes_list (List[List[str]]): List of 012-encoded genotypes of shape (n_samples, n_sites).

           genotypes_nparray (numpy.ndarray): 012-encoded genotypes of shape (n_samples, n_sites).

           genotypes_df (pandas.DataFrame): 012-encoded genotypes of shape (n_samples, n_sites). Missing values are encoded as -9.

           genotypes_onehot (numpy.ndarray of shape (n_samples, n_SNPs, 4)): One-hot encoded numpy array. The inner-most array consists of one-hot encoded values for the four nucleotides in the order of "A", "T", "G", "C". Values of 0.5 indicate heterozygotes, and missing values contain 0.0 for all four nucleotides.

   .. py:method:: parse_filetype(self, filetype: Optional[str] = None, popmapfile: Optional[str] = None) -> None

      Check the filetype and call the appropriate function to read the file format.

      Args:
          filetype (str or None): Filetype. Supported values include: "phylip", "structure1row", "structure2row", "structure1rowPopID", and "structure2rowPopID". Defaults to None.

          popmapfile (str or None): Path to population map file. Defaults to None.

      Raises:
          OSError: No filetype specified.
          OSError: Filetype not supported.


   .. py:method:: check_filetype(self, filetype: str) -> None

      Validate that the filetype is correct.

      Args:
          filetype (str or None): Filetype to use.

      Raises:
          TypeError: Filetype does not match the validation.


   .. py:method:: read_tree(self, treefile: str) -> toytree.tree

      Read Newick-style phylogenetic tree into toytree object.

      Format should be of type 0 (see toytree documentation).

      Args:
          treefile (str): Path to Newick-style tree file.

      Returns:
          toytree.tree object: Input tree as toytree object.


   .. py:method:: q_from_file(self, fname: str, label: bool = True) -> pandas.DataFrame

      Read Q matrix from file on disk.

      Args:
          fname (str): Path to Q matrix input file.

          label (bool): True if nucleotide label order is present, otherwise False.

      Returns:
          pandas.DataFrame: Q-matrix as pandas DataFrame object.


   .. py:method:: q_from_iqtree(self, iqfile: str) -> pandas.DataFrame

      Read in Q-matrix from *.iqtree file.

      The *.iqtree file is one of the IQ-TREE output files and contains the standard output of the IQ-TREE run.

      Args:
          iqfile (str): Path to *.iqtree file.

      Returns:
          pandas.DataFrame: Q-matrix as pandas DataFrame.

      Raises:
          FileNotFoundError: If iqtree file could not be found.
          IOError: If iqtree file could not be read from.


   .. py:method:: read_structure(self, onerow: bool = False, popids: bool = True) -> None

      Read a structure file with two rows per individual.

      Args:
          onerow (bool, optional): True if file is in one-row format. False if two-row format. Defaults to False.

          popids (bool, optional): True if population IDs are present as 2nd column in structure file, otherwise False. Defaults to True.

      Raises:
          ValueError: Sample names do not match for two-row format.
          ValueError: Population IDs do not match for two-row format.
          AssertionError: All sequences must be the same length.


   .. py:method:: read_phylip(self) -> None

      Populates GenotypeData object by parsing Phylip.

      Raises:
          ValueError: All sequences must be the same length as specified in the header line.

          ValueError: Number of individuals differs from header line.


   .. py:method:: read_phylip_tree_imputation(self, aln: str) -> Dict[str, List[str]]

      Function to read an alignment file.

      Args:
          aln (str): Path to alignment file.

      Returns:
          Dict[str, List[str]]: Dictionary with keys=sampleIDs and values=lists of sequences divided by site (i.e., all sites for one sample across all columns).

      Raises:
          TypeError: Alignment file not specified.
          IOError: Alignment file could not be read from.
          FileNotFoundError: Alignment file not found.


   .. py:method:: convert_012(self, snps: List[List[str]], vcf: bool = False, impute_mode: bool = False) -> List[List[int]]

      Encode IUPAC nucleotides as 0 (reference), 1 (heterogygous), and 2 (alternate) alleles.

      Args:
          snps (List[List[str]]): 2D list of genotypes of shape (n_samples, n_sites).

          vcf (bool, optional): Whether or not VCF file input is provided. Not yet supported. Defaults to False.

          impute_mode (bool, optional): Whether or not convert_012() is called in impute mode. If True, then returns the 012-encoded genotypes and does not set the ``self.snps`` attribute. If False, it does the opposite. Defaults to False.

      Returns:
          List[List[int]], optional: 012-encoded genotypes as a 2D list of shape (n_samples, n_sites). Only returns value if ``impute_mode`` is True.

          List[int], optional: List of integers indicating bi-allelic site indexes.

          int, optional: Number of remaining valid sites.


   .. py:method:: convert_onehot(self, snp_data: Union[numpy.ndarray, List[List[int]]], encodings_dict: Optional[Dict[str, int]] = None) -> numpy.ndarray

      Convert input data to one-hot format.

      Args:
          snp_data (numpy.ndarray of shape (n_samples, n_SNPs) or List[List[int]]): Input 012-encoded data.

          encodings_dict (Dict[str, int] or None): Encodings to convert structure to phylip format.

      Returns:
          numpy.ndarray: One-hot encoded data.


   .. py:method:: read_popmap(self, popmapfile: Optional[str]) -> None

      Read population map from file.

      Args:
          popmapfile (str): Path to population map file.

      Raises:
          ValueError: No samples were in the input file.
          ValueError: Samples missing from the popmap file.
          ValueError: Lengths of popmap file and samples differ.


   .. py:method:: snpcount(self) -> int
      :property:

      Number of snps in the dataset.

      Returns:
          int: Number of SNPs per individual.


   .. py:method:: indcount(self) -> int
      :property:

      Number of individuals in dataset.

      Returns:
          int: Number of individuals in input data.


   .. py:method:: populations(self) -> List[Union[str, int]]
      :property:

      Population Ids.

      Returns:
          List[Union[str, int]]: Population IDs.


   .. py:method:: individuals(self) -> List[str]
      :property:

      Sample IDs in input order.

      Returns:
          List[str]: Sample IDs in input order.


   .. py:method:: genotypes_list(self) -> List[List[int]]
      :property:

      Encoded 012 genotypes as a 2D list.

      Returns:
          List[List[int]]: encoded 012 genotypes.


   .. py:method:: genotypes_nparray(self) -> numpy.ndarray
      :property:

      012-encoded genotypes as a numpy.ndarray.

      Returns:
          numpy.ndarray of shape (n_samples, n_SNPs): 012-encoded genotypes of shape (n_samples, n_SNPs).


   .. py:method:: genotypes_df(self) -> pandas.DataFrame
      :property:

      Encoded 012 genotypes as a pandas DataFrame object

      Returns:
          pandas.DataFrame of shape (n_samples, n_SNPs): 012-encoded genotypes.


   .. py:method:: genotypes_onehot(self) -> Union[numpy.ndarray, List[List[List[float]]]]
      :property:

      One-hot encoded snps format.

      Returns:
          numpy.ndarray of shape (n_samples, n_SNPs): One-hot encoded numpy array.



.. py:function:: merge_alleles(first: List[Union[str, int]], second: Optional[List[Union[str, int]]] = None) -> List[str]

   Merges first and second alleles in structure file.

   Args:
       first (List[Union[str, int] or None): Alleles on first line.
       second (List[Union[str, int]] or None, optional): Second row of alleles. Defaults to None.

   Returns:
       List[str]: VCF file-style genotypes (i.e. split by "/").

   Raises:
       ValueError: First and second lines have differing lengths.
       ValueError: Line has non-even number of alleles.


